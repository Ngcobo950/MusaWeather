{"version":3,"sources":["component/Header.js","component/Form.js","component/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","Form","onSubmit","this","props","myWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","newAPI","json","data","console","log","setState","main","temp","sys","weather","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAgBeA,E,iLAXb,OACC,6BACC,4CACA,mE,GALiBC,IAAMC,WCaZC,E,iLAXP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,WACnC,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,+C,GANeT,IAAMC,WCcVS,E,iLAZP,OACI,6BACNN,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAW,wCAAcR,KAAKC,MAAMM,KAAzB,KAAiCP,KAAKC,MAAMO,SACrFR,KAAKC,MAAMQ,aAAe,2CAAiBT,KAAKC,MAAMQ,aACtDT,KAAKC,MAAMS,UAAY,wCAAcV,KAAKC,MAAMS,UAChDV,KAAKC,MAAMU,aAAe,yCAAeX,KAAKC,MAAMU,aACrDX,KAAKC,MAAMW,OAAS,2BAAIZ,KAAKC,MAAMW,Y,GARlBhB,IAAMC,WCEtBgB,EAAS,mCAuEAC,E,2MAnEbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAITd,U,sCAAY,WAAOe,GAAP,qBAAAC,EAAA,4DACVD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAHhC,SAKWC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EK,IAL9F,cAKJW,EALI,gBAOSA,EAAOC,OAPhB,OAOJC,EAPI,OAQNnB,GAAQC,GACZmB,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACZpB,YAAaiB,EAAKI,KAAKC,KACvBxB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKM,IAAIxB,QAClBE,SAAUgB,EAAKI,KAAKpB,SACpBC,YAAae,EAAKO,QAAQ,GAAGtB,YAC7BC,MAAM,MAGR,EAAKiB,SAAS,CACZpB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAM,kCA1BE,0C,8HAkCV,OACE,6BACE,yBAAKsB,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACd,yBAAKA,UAAU,SACd,kBAAC,EAAD,OAEA,kBAAC,EAAD,CAAMhC,UAAWF,KAAKE,UAAWgC,UAAU,SAC3C,kBAAC,EAAD,CAASzB,YAAaT,KAAKe,MAAMN,YAAaF,KAAMP,KAAKe,MAAMR,KAAMC,QAASR,KAAKe,MAAMP,QAASE,SAAUV,KAAKe,MAAML,SAAUC,YAAaX,KAAKe,MAAMJ,YAAaC,MAAOZ,KAAKe,MAAMH,kB,GAvDxLhB,IAAMC,WCIJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.735f70c6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//creating class component that will have a header and paragraph\r\nclass Header extends React.Component {\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Musa Weather</h1>\r\n\t\t\t\t<p>Find weather conditions here...</p>\r\n\t\t\t</div>\r\n\r\n\t\t\t);\t\r\n\t}\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n//creating component that is form wich will have input and button for our page\r\nclass Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.myWeather}>\r\n\t\t\t\t<input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n\t\t\t\t<input type=\"text\" name=\"country\" placeholder=\"Country\" />\r\n\t\t\t\t<button>Submit</button>\r\n\r\n\t\t\t</form>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\n\r\n//creating the component that will pass the data of the weather to our page which they are under one element that is div\r\nclass Weather extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n\t\t\t\t{ this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p> }\r\n\t\t\t\t{ this.props.temperature && <p>Temperature: {this.props.temperature}</p> }\r\n\t\t\t\t{ this.props.humidity && <p>Humidity: {this.props.humidity}</p> }\r\n\t\t\t\t{ this.props.description && <p>Conditions:{this.props.description}</p> }\r\n\t\t\t\t{this.props.error && <p>{this.props.error}</p> }\r\n\t\t\t</div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Weather;","import React from 'react';\nimport Header from './component/Header';\nimport Form from './component/Form';\nimport Weather from './component/Weather';\n\nconst API_KEY= \"2c8c3e25c8c369dbef83f8af92452b8d\"\n\n//creating class that will have the data of the weather and that states will be undefined.\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n//creating function myWeather wich have the data and API tha we call in order to get the weather\n  myWeather = async (e) =>{\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    \n    const newAPI = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`);\n    \n    const data = await newAPI.json();\n    if (city && country){         //creating if statement which will help us when you didnt put anything on your input will help code not to brake\n    console.log(data)\n\n    this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description, \n      error:''\n    });\n  } else {\n    this.setState({\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error:'Please enter City and Country'\n    });\n\n  }\n\n}\n//rendering the components for the results of the weather in order to be displayed in our page\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                 <div className=\"heady\">\n                  <Header/>\n                  </div>\n                  <Form myWeather={this.myWeather} className=\"main\"/>\n                  <Weather temperature={this.state.temperature} city={this.state.city} country={this.state.country} humidity={this.state.humidity} description={this.state.description} error={this.state.error} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}